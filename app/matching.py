from sqlalchemy.orm import Session
from app.models import User, Conversation
from typing import List, Optional
import random
from datetime import datetime, timedelta, timezone

class MatchingService:
    def __init__(self, db: Session):
        self.db = db
    
    def find_match(self, user: User, search_type: str) -> Optional[User]:
        """T√¨m ng∆∞·ªùi ph√π h·ª£p ƒë·ªÉ gh√©p n·ªëi"""
        try:
            # L·∫•y danh s√°ch ng∆∞·ªùi c√≥ th·ªÉ match (kh√¥ng ph·∫£i ch√≠nh m√¨nh)
            # Ch·ªâ match v·ªõi nh·ªØng user ƒëang trong tr·∫°ng th√°i "searching"
            potential_matches = self.db.query(User).filter(
                User.id != user.id,
                User.state == "searching"
            ).all()
            
            if not potential_matches:
                return None
            
            # Ki·ªÉm tra l·∫°i xem user hi·ªán t·∫°i v·∫´n ƒëang trong tr·∫°ng th√°i searching
            # (ƒë·ªÉ tr√°nh race condition)
            current_user = self.db.query(User).filter(User.id == user.id).first()
            if not current_user or current_user.state != "searching":
                return None
            
            # ∆Øu ti√™n gh√©p n·ªëi theo s·ªü th√≠ch v√† mong mu·ªën
            best_matches = []
            good_matches = []
            random_matches = []
            
            for potential_match in potential_matches:
                try:
                    # Ki·ªÉm tra xem ƒë√£ c√≥ cu·ªôc tr√≤ chuy·ªán active n√†o gi·ªØa 2 ng∆∞·ªùi n√†y ch∆∞a
                    existing_active_conversation = self.db.query(Conversation).filter(
                        ((Conversation.user1_id == user.id) & (Conversation.user2_id == potential_match.id)) |
                        ((Conversation.user1_id == potential_match.id) & (Conversation.user2_id == user.id)),
                        Conversation.is_active == True
                    ).first()
                    
                    # B·ªè qua n·∫øu ƒëang c√≥ conversation active v·ªõi user n√†y
                    if existing_active_conversation:
                        continue
                    
                    # Ki·ªÉm tra l·∫°i tr·∫°ng th√°i c·ªßa potential_match (tr√°nh race condition)
                    refreshed_match = self.db.query(User).filter(User.id == potential_match.id).first()
                    if not refreshed_match or refreshed_match.state != "searching":
                        continue
                    
                    # T√≠nh ƒëi·ªÉm ph√π h·ª£p
                    compatibility_score = self._calculate_compatibility(user, refreshed_match)
                    
                    if compatibility_score >= 0.8:
                        best_matches.append((refreshed_match, compatibility_score))
                    elif compatibility_score >= 0.5:
                        good_matches.append((refreshed_match, compatibility_score))
                    else:
                        random_matches.append((refreshed_match, compatibility_score))
                        
                except Exception as e:
                    print(f"Error processing potential match {potential_match.id}: {e}")
                    continue
            
            # S·∫Øp x·∫øp theo ƒëi·ªÉm ph√π h·ª£p
            best_matches.sort(key=lambda x: x[1], reverse=True)
            good_matches.sort(key=lambda x: x[1], reverse=True)
            
            # ∆Øu ti√™n gh√©p n·ªëi t·ªët nh·∫•t tr∆∞·ªõc
            if best_matches:
                return best_matches[0][0]
            elif good_matches:
                return good_matches[0][0]
            elif random_matches:
                return random.choice(random_matches)[0]
            
            return None
            
        except Exception as e:
            print(f"Error in find_match: {e}")
            return None
    
    def _calculate_compatibility(self, user1: User, user2: User) -> float:
        """T√≠nh ƒëi·ªÉm ph√π h·ª£p gi·ªØa 2 ng∆∞·ªùi d√πng"""
        score = 0.0
        total_factors = 0
        
        # Ki·ªÉm tra preference
        if user1.preference == "T·∫•t c·∫£" or user1.preference == user2.gender:
            score += 1.0
        elif user1.preference != user2.gender:
            score += 0.0
        total_factors += 1
        
        if user2.preference == "T·∫•t c·∫£" or user2.preference == user1.gender:
            score += 1.0
        elif user2.preference != user1.gender:
            score += 0.0
        total_factors += 1
        
        # Ki·ªÉm tra m·ª•c ƒë√≠ch t√¨m ki·∫øm
        if user1.goal == user2.goal:
            score += 1.0
        elif self._are_goals_compatible(user1.goal, user2.goal):
            score += 0.7
        else:
            score += 0.3
        total_factors += 1
        
        # Ki·ªÉm tra s·ªü th√≠ch chung
        interests1 = user1.get_interests_list()
        interests2 = user2.get_interests_list()
        
        if interests1 and interests2:
            common_interests = set(interests1) & set(interests2)
            if common_interests:
                score += min(len(common_interests) / 2.0, 1.0)  # T·ªëi ƒëa 1 ƒëi·ªÉm cho s·ªü th√≠ch
            total_factors += 1
        
        return score / total_factors if total_factors > 0 else 0.0
    
    def _are_goals_compatible(self, goal1: str, goal2: str) -> bool:
        """Ki·ªÉm tra xem 2 m·ª•c ƒë√≠ch c√≥ t∆∞∆°ng th√≠ch kh√¥ng"""
        compatible_pairs = [
            ("M·ªôt m·ªëi quan h·ªá nh·∫π nh√†ng, vui v·∫ª", "Ch∆∞a ch·∫Øc, mu·ªën kh√°m ph√° th√™m"),
            ("M·ªôt m·ªëi quan h·ªá nghi√™m t√∫c", "K·∫øt h√¥n"),
            ("M·ªôt m·ªëi quan h·ªá nghi√™m t√∫c", "B·∫°n ƒë·ªùi l√¢u d√†i"),
            ("K·∫øt h√¥n", "B·∫°n ƒë·ªùi l√¢u d√†i"),
            ("K·∫øt b·∫°n m·ªõi th√¥i ü•∞", "M·ªôt m·ªëi quan h·ªá nh·∫π nh√†ng, vui v·∫ª"),
        ]
        
        return (goal1, goal2) in compatible_pairs or (goal2, goal1) in compatible_pairs
    
    def create_conversation(self, user1: User, user2: User, conversation_type: str = "chat") -> Conversation:
        """T·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi gi·ªØa 2 ng∆∞·ªùi d√πng"""
        try:
            # Ki·ªÉm tra l·∫°i xem c·∫£ hai user v·∫´n ƒëang trong tr·∫°ng th√°i searching
            # (ƒë·ªÉ tr√°nh race condition)
            user1_refreshed = self.db.query(User).filter(User.id == user1.id).first()
            user2_refreshed = self.db.query(User).filter(User.id == user2.id).first()
            
            if not user1_refreshed or not user2_refreshed:
                raise ValueError("Kh√¥ng t√¨m th·∫•y m·ªôt trong hai user")
            
            if user1_refreshed.state != "searching" or user2_refreshed.state != "searching":
                raise ValueError("M·ªôt trong hai user kh√¥ng c√≤n trong tr·∫°ng th√°i searching")
            
            # Ki·ªÉm tra xem ƒë√£ c√≥ conversation active n√†o gi·ªØa 2 user n√†y ch∆∞a
            existing_conversation = self.db.query(Conversation).filter(
                ((Conversation.user1_id == user1.id) & (Conversation.user2_id == user2.id)) |
                ((Conversation.user1_id == user2.id) & (Conversation.user2_id == user1.id)),
                Conversation.is_active == True
            ).first()
            
            if existing_conversation:
                raise ValueError("ƒê√£ c√≥ conversation active gi·ªØa 2 user n√†y")
            
            conversation = Conversation(
                user1_id=user1.id,
                user2_id=user2.id,
                conversation_type=conversation_type,
                is_active=True,
                countdown_start_time=datetime.now(timezone.utc)  # Set th·ªùi gian b·∫Øt ƒë·∫ßu countdown
            )
            
            self.db.add(conversation)
            self.db.commit()
            self.db.refresh(conversation)
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa c·∫£ 2 user
            user1_refreshed.state = "connected"
            user2_refreshed.state = "connected"
            self.db.commit()
            
            return conversation
            
        except Exception as e:
            self.db.rollback()
            raise e
    
    def end_conversation(self, conversation: Conversation):
        """K·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán"""
        try:
            conversation.is_active = False
            self.db.commit()
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa c·∫£ 2 user v·ªÅ waiting
            user1 = self.db.query(User).filter(User.id == conversation.user1_id).first()
            user2 = self.db.query(User).filter(User.id == conversation.user2_id).first()
            
            if user1:
                user1.state = "waiting"
            if user2:
                user2.state = "waiting"
            
            self.db.commit()
            
        except Exception as e:
            print(f"Error ending conversation {conversation.id}: {e}")
            self.db.rollback()
            # V·∫´n c·ªë g·∫Øng c·∫≠p nh·∫≠t tr·∫°ng th√°i user ngay c·∫£ khi c√≥ l·ªói
            try:
                user1 = self.db.query(User).filter(User.id == conversation.user1_id).first()
                user2 = self.db.query(User).filter(User.id == conversation.user2_id).first()
                
                if user1:
                    user1.state = "waiting"
                if user2:
                    user2.state = "waiting"
                
                self.db.commit()
            except:
                pass
    
    def cleanup_inactive_conversations(self):
        """D·ªçn d·∫πp c√°c cu·ªôc tr√≤ chuy·ªán kh√¥ng ho·∫°t ƒë·ªông (sau 15 ph√∫t)"""
        cutoff_time = datetime.utcnow() - timedelta(minutes=15)
        
        inactive_conversations = self.db.query(Conversation).filter(
            Conversation.is_active == True,
            Conversation.last_activity < cutoff_time,
            Conversation.user1_keep == False,
            Conversation.user2_keep == False
        ).all()
        
        for conversation in inactive_conversations:
            self.end_conversation(conversation) 