// Mapmo.vn - Anonymous Web Chat Application
class MapmoApp {
    constructor() {
        this.currentUser = null;
        this.currentConversation = null;
        this.websocket = null;
        this.pendingTempMessage = null; // Tin nh·∫Øn t·∫°m th·ªùi ƒëang ch·ªù
        this.typingTimeout = null; // Timeout cho typing indicator
        
        // Countdown timer properties
        this.countdownTimer = null;
        this.countdownInterval = null;
        this.countdownDuration = 5 * 60; // 5 ph√∫t = 300 gi√¢y
        this.countdownTimeLeft = this.countdownDuration;
        this.bothKept = false; // Tr·∫°ng th√°i c·∫£ 2 ng∆∞·ªùi ƒë√£ keep
        this.countdownStartTime = null; // Th·ªùi gian b·∫Øt ƒë·∫ßu t·ª´ server
        this.serverSyncInterval = null; // Interval ƒë·ªÉ sync v·ªõi server
        
        this.init();
    }
    
    init() {
        this.checkAuth();
        this.setupEventListeners();
        this.createParticles();
    }
    
    createParticles() {
        const particlesContainer = document.createElement('div');
        particlesContainer.className = 'particles';
        document.body.appendChild(particlesContainer);
        
        for (let i = 0; i < 50; i++) {
            const particle = document.createElement('div');
            particle.className = 'particle';
            particle.style.left = Math.random() * 100 + '%';
            particle.style.top = Math.random() * 100 + '%';
            particle.style.animationDelay = Math.random() * 6 + 's';
            particle.style.animationDuration = (Math.random() * 3 + 3) + 's';
            particlesContainer.appendChild(particle);
        }
    }
    
    async checkAuth() {
        const token = localStorage.getItem('access_token');
        if (token) {
            try {
                const response = await fetch('/api/me', {
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                
                if (response.ok) {
                    const userData = await response.json();
                    this.currentUser = userData;
                    
                    // Ki·ªÉm tra xem c√≥ conversation ID trong URL kh√¥ng
                    const pathParts = window.location.pathname.split('/');
                    const conversationId = pathParts[pathParts.length - 1];
                    
                    if (pathParts.includes('chat') && conversationId && !isNaN(conversationId)) {
                        await this.loadConversationFromUrl(parseInt(conversationId));
                    } else {
                        this.showMainInterface();
                    }
                } else {
                    this.showLoginForm();
                }
            } catch (error) {
                this.showLoginForm();
            }
        } else {
            this.showLoginForm();
        }
    }
    
    async loadConversationFromUrl(conversationId) {
        // Load conversation t·ª´ URL
        try {
            const response = await fetch(`/api/conversation/${conversationId}`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('access_token')}`
                }
            });
            
            if (response.ok) {
                const data = await response.json();
                this.currentConversation = {
                    conversation_id: conversationId,
                    conversation_type: data.data.conversation_type,
                    matched_user: data.data.matched_user
                };
                
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i keep
                if (data.data.keep_status) {
                    this.keepStatus = data.data.keep_status.current_user_kept;
                    this.setBothKeptStatus(data.data.keep_status.both_kept);
                }
                
                // C·∫≠p nh·∫≠t th√¥ng tin countdown t·ª´ server
                if (data.data.countdown) {
                    this.countdownTimeLeft = data.data.countdown.time_left;
                    this.countdownStartTime = data.data.countdown.start_time;
                    
                    console.log('üìä Countdown info from server:', {
                        time_left: this.countdownTimeLeft,
                        start_time: this.countdownStartTime,
                        expired: data.data.countdown.expired,
                        both_kept: data.data.countdown.both_kept
                    });
                    
                    // N·∫øu countdown ƒë√£ h·∫øt th·ªùi gian, k·∫øt th√∫c conversation
                    if (data.data.countdown.expired && !this.bothKept) {
                        this.showError('H·∫øt th·ªùi gian! Cu·ªôc tr√≤ chuy·ªán s·∫Ω k·∫øt th√∫c.');
                        setTimeout(() => {
                            this.endConversation();
                        }, 2000);
                        return;
                    }
                    
                    // N·∫øu c·∫£ 2 ƒë√£ keep, d·ª´ng countdown
                    if (data.data.countdown.both_kept) {
                        this.setBothKeptStatus(true);
                    }
                }
                
                this.showChatInterface();
            } else if (response.status === 404) {
                this.showError('Ph√≤ng chat kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã ƒë√≥ng');
                this.showMainInterface();
            } else if (response.status === 401) {
                this.showError('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n');
                this.showLoginForm();
            } else {
                this.showError('Kh√¥ng th·ªÉ load ph√≤ng chat');
                this.showMainInterface();
            }
        } catch (error) {
            console.error('Error loading conversation:', error);
            this.showError('L·ªói k·∫øt n·ªëi');
            this.showMainInterface();
        }
    }
    
    setupEventListeners() {
        document.addEventListener('click', (e) => {
            if (e.target.id === 'loginBtn') {
                e.preventDefault();
                this.handleLogin();
            }
            if (e.target.id === 'registerBtn') {
                e.preventDefault();
                this.handleRegister();
            }
            if (e.target.id === 'logoutBtn') {
                e.preventDefault();
                this.handleLogout();
            }
            if (e.target.id === 'chatBtn' || e.target.closest('#chatBtn')) {
                e.preventDefault();
                this.startSearch('chat');
            }
            if (e.target.id === 'voiceBtn' || e.target.closest('#voiceBtn')) {
                e.preventDefault();
                this.startSearch('voice');
            }
        });
    }
    
    showLoginForm() {
        const container = document.querySelector('.container');
        container.innerHTML = `
            <div class="welcome-section">
                <h1>Mapmo.vn</h1>
                <p>K·∫øt n·ªëi ·∫©n danh, kh√°m ph√° m·ªëi quan h·ªá m·ªõi</p>
            </div>
            
            <div class="form-container">
                <h2 class="form-title">ƒêƒÉng nh·∫≠p</h2>
                <form id="loginForm">
                    <div class="form-group">
                        <label class="form-label">T√™n ƒëƒÉng nh·∫≠p</label>
                        <input type="text" id="username" class="form-input" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">M·∫≠t kh·∫©u</label>
                        <input type="password" id="password" class="form-input" required>
                    </div>
                    <button type="submit" id="loginBtn" class="btn btn-primary">ƒêƒÉng nh·∫≠p</button>
                </form>
                <p style="text-align: center; margin-top: 20px;">
                    Ch∆∞a c√≥ t√†i kho·∫£n? <a href="#" id="showRegister">ƒêƒÉng k√Ω ngay</a>
                </p>
            </div>
        `;
        
        document.getElementById('showRegister').addEventListener('click', (e) => {
            e.preventDefault();
            this.showRegisterForm();
        });
    }
    
    showRegisterForm() {
        const container = document.querySelector('.container');
        container.innerHTML = `
            <div class="welcome-section">
                <h1>Mapmo.vn</h1>
                <p>Tham gia c·ªông ƒë·ªìng chat ·∫©n danh</p>
            </div>
            
            <div class="form-container">
                <h2 class="form-title">ƒêƒÉng k√Ω</h2>
                <form id="registerForm">
                    <div class="form-group">
                        <label class="form-label">T√™n ƒëƒÉng nh·∫≠p</label>
                        <input type="text" id="regUsername" class="form-input" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">M·∫≠t kh·∫©u</label>
                        <input type="password" id="regPassword" class="form-input" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
                        <input type="password" id="confirmPassword" class="form-input" required>
                    </div>
                    <button type="submit" id="registerBtn" class="btn btn-primary">ƒêƒÉng k√Ω</button>
                </form>
                <p style="text-align: center; margin-top: 20px;">
                    ƒê√£ c√≥ t√†i kho·∫£n? <a href="#" id="showLogin">ƒêƒÉng nh·∫≠p</a>
                </p>
            </div>
        `;
        
        document.getElementById('showLogin').addEventListener('click', (e) => {
            e.preventDefault();
            this.showLoginForm();
        });
    }
    
    showProfileSetup() {
        const container = document.querySelector('.container');
        container.innerHTML = `
            <div class="welcome-section">
                <h1>Ho√†n th√†nh h·ªì s∆°</h1>
                <p>H√£y chia s·∫ª m·ªôt ch√∫t v·ªÅ b·∫£n th√¢n ƒë·ªÉ t√¨m ƒë∆∞·ª£c ng∆∞·ªùi ph√π h·ª£p</p>
            </div>
            
            <div class="form-container">
                <h2 class="form-title">Th√¥ng tin c√° nh√¢n</h2>
                <form id="profileForm">
                    <div class="form-group">
                        <label class="form-label">Bi·ªát danh</label>
                        <input type="text" id="nickname" class="form-input" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Ng√†y sinh</label>
                        <input type="date" id="dob" class="form-input" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Gi·ªõi t√≠nh</label>
                        <select id="gender" class="form-input" required>
                            <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                            <option value="Nam">Nam</option>
                            <option value="N·ªØ">N·ªØ</option>
                            <option value="Kh√°c">Kh√°c</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">T√¨m ki·∫øm</label>
                        <select id="preference" class="form-input" required>
                            <option value="">Ch·ªçn ƒë·ªëi t∆∞·ª£ng</option>
                            <option value="Nam">Nam</option>
                            <option value="N·ªØ">N·ªØ</option>
                            <option value="T·∫•t c·∫£">T·∫•t c·∫£</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">M·ª•c ƒë√≠ch</label>
                        <select id="goal" class="form-input" required>
                            <option value="">Ch·ªçn m·ª•c ƒë√≠ch</option>
                            <option value="M·ªôt m·ªëi quan h·ªá nh·∫π nh√†ng, vui v·∫ª">M·ªôt m·ªëi quan h·ªá nh·∫π nh√†ng, vui v·∫ª</option>
                            <option value="M·ªôt m·ªëi quan h·ªá nghi√™m t√∫c">M·ªôt m·ªëi quan h·ªá nghi√™m t√∫c</option>
                            <option value="Ch∆∞a ch·∫Øc, mu·ªën kh√°m ph√° th√™m">Ch∆∞a ch·∫Øc, mu·ªën kh√°m ph√° th√™m</option>
                            <option value="K·∫øt h√¥n">K·∫øt h√¥n</option>
                            <option value="B·∫°n ƒë·ªùi l√¢u d√†i">B·∫°n ƒë·ªùi l√¢u d√†i</option>
                            <option value="M·ªëi quan h·ªá m·ªü">M·ªëi quan h·ªá m·ªü</option>
                            <option value="K·∫øt b·∫°n m·ªõi th√¥i ü•∞">K·∫øt b·∫°n m·ªõi th√¥i ü•∞</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">S·ªü th√≠ch (ch·ªçn t·ªëi ƒëa 5)</label>
                        <div id="interestsContainer" class="interests-container">
                            <label class="interest-item">
                                <input type="checkbox" value="T·∫≠p gym üí™"> T·∫≠p gym üí™
                            </label>
                            <label class="interest-item">
                                <input type="checkbox" value="Nh·∫£y nh√≥t üíÉ"> Nh·∫£y nh√≥t üíÉ
                            </label>
                            <label class="interest-item">
                                <input type="checkbox" value="Ch·ª•p ·∫£nh üì∑"> Ch·ª•p ·∫£nh üì∑
                            </label>
                            <label class="interest-item">
                                <input type="checkbox" value="U·ªëng c√† ph√™ ‚òï"> U·ªëng c√† ph√™ ‚òï
                            </label>
                            <label class="interest-item">
                                <input type="checkbox" value="Du l·ªãch ‚úàÔ∏è"> Du l·ªãch ‚úàÔ∏è
                            </label>
                            <label class="interest-item">
                                <input type="checkbox" value="Ch∆°i game üéÆ"> Ch∆°i game üéÆ
                            </label>
                            <label class="interest-item">
                                <input type="checkbox" value="ƒê·ªçc s√°ch üìö"> ƒê·ªçc s√°ch üìö
                            </label>
                            <label class="interest-item">
                                <input type="checkbox" value="Nghe nh·∫°c üéß"> Nghe nh·∫°c üéß
                            </label>
                            <label class="interest-item">
                                <input type="checkbox" value="L√†m t√¨nh nguy·ªán ‚ù§Ô∏è"> L√†m t√¨nh nguy·ªán ‚ù§Ô∏è
                            </label>
                            <label class="interest-item">
                                <input type="checkbox" value="Xem phim üçø"> Xem phim üçø
                            </label>
                            <label class="interest-item">
                                <input type="checkbox" value="Leo n√∫i üèîÔ∏è"> Leo n√∫i üèîÔ∏è
                            </label>
                            <label class="interest-item">
                                <input type="checkbox" value="Ngh·ªá thu·∫≠t üé®"> Ngh·ªá thu·∫≠t üé®
                            </label>
                            <label class="interest-item">
                                <input type="checkbox" value="ƒÇn ngon ü•ò"> ƒÇn ngon ü•ò
                            </label>
                            <label class="interest-item">
                                <input type="checkbox" value="T√¢m linh ‚ú®"> T√¢m linh ‚ú®
                            </label>
                            <label class="interest-item">
                                <input type="checkbox" value="Th·ªùi trang üëó"> Th·ªùi trang üëó
                            </label>
                        </div>
                    </div>
                    
                    <button type="submit" id="saveProfileBtn" class="btn btn-primary">L∆∞u h·ªì s∆°</button>
                </form>
            </div>
        `;
        
        // Th√™m event listener cho form
        document.getElementById('profileForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleProfileSetup();
        });
        
        // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng s·ªü th√≠ch ƒë∆∞·ª£c ch·ªçn
        const checkboxes = document.querySelectorAll('#interestsContainer input[type="checkbox"]');
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                const checkedBoxes = document.querySelectorAll('#interestsContainer input[type="checkbox"]:checked');
                if (checkedBoxes.length > 5) {
                    checkbox.checked = false;
                    this.showError('Ch·ªâ ƒë∆∞·ª£c ch·ªçn t·ªëi ƒëa 5 s·ªü th√≠ch');
                }
            });
        });
    }
    
    async handleLogin() {
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        
        if (!username || !password) {
            this.showError('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin');
            return;
        }
        
        try {
            const response = await fetch('/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, password })
            });
            
            const data = await response.json();
            
            if (response.ok) {
                localStorage.setItem('access_token', data.data.access_token);
                this.currentUser = data.data.user;
                
                if (data.data.user.profile_completed) {
                    this.showMainInterface();
                } else {
                    this.showProfileSetup();
                }
            } else {
                this.showError(data.detail || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i');
            }
        } catch (error) {
            this.showError('L·ªói k·∫øt n·ªëi');
        }
    }
    
    async handleRegister() {
        const username = document.getElementById('regUsername').value;
        const password = document.getElementById('regPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        
        if (!username || !password || !confirmPassword) {
            this.showError('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin');
            return;
        }
        
        if (password !== confirmPassword) {
            this.showError('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp');
            return;
        }
        
        try {
            const response = await fetch('/register', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, password, confirm_password: confirmPassword })
            });
            
            const data = await response.json();
            
            if (response.ok) {
                this.showSuccess('ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p');
                setTimeout(() => this.showLoginForm(), 2000);
            } else {
                this.showError(data.detail || 'ƒêƒÉng k√Ω th·∫•t b·∫°i');
            }
        } catch (error) {
            this.showError('L·ªói k·∫øt n·ªëi');
        }
    }
    
    async handleProfileSetup() {
        const nickname = document.getElementById('nickname').value;
        const dob = document.getElementById('dob').value;
        const gender = document.getElementById('gender').value;
        const preference = document.getElementById('preference').value;
        const goal = document.getElementById('goal').value;
        
        // L·∫•y danh s√°ch s·ªü th√≠ch ƒë√£ ch·ªçn
        const checkedInterests = document.querySelectorAll('#interestsContainer input[type="checkbox"]:checked');
        const interests = Array.from(checkedInterests).map(cb => cb.value);
        
        if (!nickname || !dob || !gender || !preference || !goal) {
            this.showError('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin');
            return;
        }
        
        if (interests.length === 0) {
            this.showError('Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 s·ªü th√≠ch');
            return;
        }
        
        if (interests.length > 5) {
            this.showError('Ch·ªâ ƒë∆∞·ª£c ch·ªçn t·ªëi ƒëa 5 s·ªü th√≠ch');
            return;
        }
        
        try {
            const response = await fetch('/profile', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('access_token')}`
                },
                body: JSON.stringify({
                    nickname,
                    dob: new Date(dob).toISOString(),
                    gender,
                    preference,
                    goal,
                    interests
                })
            });
            
            const data = await response.json();
            
            if (response.ok) {
                this.showSuccess('C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!');
                // C·∫≠p nh·∫≠t th√¥ng tin user hi·ªán t·∫°i
                this.currentUser.nickname = nickname;
                setTimeout(() => this.showMainInterface(), 1500);
            } else {
                this.showError(data.detail || 'C·∫≠p nh·∫≠t h·ªì s∆° th·∫•t b·∫°i');
            }
        } catch (error) {
            this.showError('L·ªói k·∫øt n·ªëi');
        }
    }
    
    showMainInterface() {
        // D·ª´ng interval c·∫≠p nh·∫≠t s·ªë ng∆∞·ªùi ƒëang t√¨m ki·∫øm n·∫øu c√≥
        if (this.searchingCountInterval) {
            clearInterval(this.searchingCountInterval);
            this.searchingCountInterval = null;
        }
        
        const container = document.querySelector('.container');
        container.innerHTML = `
            <div class="welcome-section">
                <h1>Ch√†o ${this.currentUser.nickname || this.currentUser.username}!</h1>
                <p>S·∫µn s√†ng k·∫øt n·ªëi ch∆∞a?</p>
            </div>
            
            <div class="waiting-room">
                <h2>Ph√≤ng ch·ªù</h2>
                <p>Ch·ªçn c√°ch b·∫°n mu·ªën k·∫øt n·ªëi</p>
                
                <div class="action-buttons">
                    <a href="#" id="chatBtn" class="action-btn">
                        <i>üí¨</i>
                        <span>Chat</span>
                    </a>
                    <a href="#" id="voiceBtn" class="action-btn">
                        <i>üìû</i>
                        <span>Voice Call</span>
                    </a>
                </div>
                
                <button id="logoutBtn" class="btn btn-secondary" style="margin-top: 30px;">ƒêƒÉng xu·∫•t</button>
            </div>
        `;
    }
    
    async startSearch(searchType) {
        // Hi·ªÉn th·ªã m√†n h√¨nh t√¨m ki·∫øm ngay l·∫≠p t·ª©c
        await this.showSearching(searchType);
        
        try {
            const response = await fetch('/search', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('access_token')}`
                },
                body: JSON.stringify({ search_type: searchType })
            });
            
            const data = await response.json();
            
            if (response.ok) {
                if (data.data.status === 'searching') {
                    // ƒê√£ hi·ªÉn th·ªã searching UI r·ªìi, kh√¥ng c·∫ßn l√†m g√¨ th√™m
                    // WebSocket s·∫Ω x·ª≠ l√Ω khi c√≥ match
                } else if (data.data.conversation_id) {
                    // N·∫øu c√≥ conversation_id, c√≥ nghƒ©a l√† ƒë√£ match
                    this.currentConversation = data.data;
                    this.showChatInterface();
                }
            } else {
                this.showError(data.detail || 'T√¨m ki·∫øm th·∫•t b·∫°i');
                // Quay l·∫°i m√†n h√¨nh ch√≠nh n·∫øu c√≥ l·ªói
                this.showMainInterface();
            }
        } catch (error) {
            this.showError('L·ªói k·∫øt n·ªëi');
            // Quay l·∫°i m√†n h√¨nh ch√≠nh n·∫øu c√≥ l·ªói
            this.showMainInterface();
        }
    }
    
    async showSearching(searchType) {
        const container = document.querySelector('.container');
        container.innerHTML = `
            <div class="welcome-section">
                <h1>ƒêang t√¨m ki·∫øm...</h1>
                <p>${searchType === 'chat' ? 'T√¨m ng∆∞·ªùi ƒë·ªÉ chat' : 'T√¨m ng∆∞·ªùi ƒë·ªÉ g·ªçi voice'}</p>
            </div>
            
            <div class="waiting-room">
                <div class="searching-animation">
                    <div class="pulse-circle"></div>
                    <div class="searching-dots">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
                <h2>ƒêang t√¨m ki·∫øm ng∆∞·ªùi ph√π h·ª£p</h2>
                <p>Vui l√≤ng ch·ªù trong gi√¢y l√°t</p>
                
                <div class="searching-stats">
                    <div class="stats-item">
                        <span class="stats-icon">üë•</span>
                        <span class="stats-text">ƒêang t√¨m ki·∫øm: <span id="searchingCount">...</span> ng∆∞·ªùi</span>
                    </div>
                </div>
                
                <button id="cancelSearchBtn" class="btn btn-secondary" style="margin-top: 30px;">H·ªßy t√¨m ki·∫øm</button>
            </div>
        `;
        
        document.getElementById('cancelSearchBtn').addEventListener('click', async () => {
            try {
                // G·ªçi API ƒë·ªÉ h·ªßy t√¨m ki·∫øm
                const response = await fetch('/cancel-search', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('access_token')}`
                    }
                });
                
                if (response.ok) {
                    console.log('ƒê√£ h·ªßy t√¨m ki·∫øm th√†nh c√¥ng');
                } else {
                    console.error('L·ªói khi h·ªßy t√¨m ki·∫øm:', response.text);
                }
            } catch (error) {
                console.error('L·ªói khi h·ªßy t√¨m ki·∫øm:', error);
            }
            
            // Quay v·ªÅ m√†n h√¨nh ch√≠nh
            this.showMainInterface();
        });
        
        // L·∫•y s·ªë ng∆∞·ªùi ƒëang t√¨m ki·∫øm
        await this.updateSearchingCount();
        
        // C·∫≠p nh·∫≠t s·ªë ng∆∞·ªùi ƒëang t√¨m ki·∫øm m·ªói 5 gi√¢y
        this.searchingCountInterval = setInterval(async () => {
            await this.updateSearchingCount();
        }, 5000);
        
        // K·∫øt n·ªëi WebSocket ƒë·ªÉ nh·∫≠n th√¥ng b√°o match
        if (!this.websocket || this.websocket.readyState !== WebSocket.OPEN) {
            this.connectWebSocket();
        }
    }
    
    async showChatInterface() {
        // D·ª´ng interval c·∫≠p nh·∫≠t s·ªë ng∆∞·ªùi ƒëang t√¨m ki·∫øm n·∫øu c√≥
        if (this.searchingCountInterval) {
            clearInterval(this.searchingCountInterval);
            this.searchingCountInterval = null;
        }
        
        // T·∫°o URL ri√™ng cho ph√≤ng chat
        const chatUrl = `/chat/${this.currentConversation.conversation_id}`;
        window.history.pushState({ conversationId: this.currentConversation.conversation_id }, '', chatUrl);
        
        const container = document.querySelector('.container');
        container.innerHTML = `
            <div class="chat-container">
                <div class="chat-header">
                    <h3>ƒê√£ k·∫øt n·ªëi</h3>
                    <div class="chat-info">
                        <span class="chat-id">Ph√≤ng: #${this.currentConversation.conversation_id}</span>
                    </div>
                    <div class="chat-controls">
                        <button id="keepBtn" class="control-btn keep" title="Keep">‚ù§Ô∏è</button>
                        <button id="endBtn" class="control-btn" title="K·∫øt th√∫c">‚ùå</button>
                    </div>
                </div>
                
                <div class="chat-messages" id="chatMessages">
                    <div class="loading-messages" id="loadingMessages" style="text-align: center; padding: 20px; color: #666;">
                        <div>üì± ƒêang t·∫£i tin nh·∫Øn...</div>
                    </div>
                    <div class="typing-indicator" id="typingIndicator" style="display: none;">
                        ƒê·ªëi ph∆∞∆°ng ƒëang nh·∫≠p...
                    </div>
                </div>
                
                <div class="chat-input">
                    <input type="text" id="messageInput" placeholder="Nh·∫≠p tin nh·∫Øn..." maxlength="500">
                    <button id="sendBtn" class="send-btn">‚û§</button>
                </div>
            </div>
        `;
        
        // Load l·ªãch s·ª≠ tin nh·∫Øn
        await this.loadMessageHistory();
        
        this.connectWebSocket();
        this.setupChatEventListeners();
        
        // B·∫Øt ƒë·∫ßu countdown timer
        this.startCountdown();
    }
    
    async loadMessageHistory() {
        try {
            const response = await fetch(`/conversation/${this.currentConversation.conversation_id}/messages`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('access_token')}`
                }
            });
            
            if (response.ok) {
                const messages = await response.json();
                
                // X√≥a loading indicator
                const loadingElement = document.getElementById('loadingMessages');
                if (loadingElement) {
                    loadingElement.remove();
                }
                
                // Hi·ªÉn th·ªã tin nh·∫Øn c≈©
                if (messages.length > 0) {
                    console.log(`üìö Loaded ${messages.length} tin nh·∫Øn t·ª´ l·ªãch s·ª≠`);
                    messages.forEach(message => {
                        this.addMessage(message);
                    });
                } else {
                    console.log('üìö Kh√¥ng c√≥ tin nh·∫Øn c≈©');
                    // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ tin nh·∫Øn
                    const chatMessages = document.getElementById('chatMessages');
                    const noMessagesDiv = document.createElement('div');
                    noMessagesDiv.style.cssText = 'text-align: center; padding: 20px; color: #666; font-style: italic;';
                    noMessagesDiv.textContent = 'Ch∆∞a c√≥ tin nh·∫Øn n√†o. H√£y b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán! üí¨';
                    chatMessages.appendChild(noMessagesDiv);
                }
            } else {
                console.error('‚ùå L·ªói khi load l·ªãch s·ª≠ tin nh·∫Øn:', response.status);
                // X√≥a loading indicator v√† hi·ªÉn th·ªã l·ªói
                const loadingElement = document.getElementById('loadingMessages');
                if (loadingElement) {
                    loadingElement.innerHTML = '<div style="color: #ff6b6b;">‚ùå Kh√¥ng th·ªÉ t·∫£i tin nh·∫Øn</div>';
                }
            }
        } catch (error) {
            console.error('‚ùå L·ªói khi load l·ªãch s·ª≠ tin nh·∫Øn:', error);
            // X√≥a loading indicator v√† hi·ªÉn th·ªã l·ªói
            const loadingElement = document.getElementById('loadingMessages');
            if (loadingElement) {
                loadingElement.innerHTML = '<div style="color: #ff6b6b;">‚ùå L·ªói k·∫øt n·ªëi</div>';
            }
        }
    }
    
    connectWebSocket() {
        // S·ª≠ d·ª•ng URL ƒë·ªông thay v√¨ hardcode localhost
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const host = window.location.host;
        const token = localStorage.getItem('access_token');
        
        if (!token) {
            console.error('No access token available for WebSocket connection');
            return;
        }
        
        // Th√™m token v√†o URL query parameter
        const wsUrl = `${protocol}//${host}/ws/${this.currentUser.id}?token=${encodeURIComponent(token)}`;
        
        this.websocket = new WebSocket(wsUrl);
        
        this.websocket.onopen = () => {
            console.log('‚úÖ WebSocket connected');
            // Reset reconnection attempts on successful connection
            this.reconnectionAttempts = 0;
        };
        
        this.websocket.onmessage = async (event) => {
            try {
                const data = JSON.parse(event.data);
                
                // Handle ping/pong ƒë·ªÉ keep connection alive
                if (data.type === 'ping') {
                    this.websocket.send(JSON.stringify({ type: 'pong' }));
                    return;
                }
                
                await this.handleWebSocketMessage(data);
            } catch (error) {
                console.error('Error parsing WebSocket message:', error);
            }
        };
        
        this.websocket.onclose = (event) => {
            console.log('‚ùå WebSocket disconnected:', event.code, event.reason);
            
            // Handle authentication errors
            if (event.code === 4001) {
                console.error('WebSocket authentication failed:', event.reason);
                this.showError('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n');
                setTimeout(() => {
                    this.handleLogout();
                }, 2000);
                return;
            }
            
            // Attempt reconnection for other errors
            if (event.code !== 1000) { // 1000 = normal closure
                this.attemptReconnection();
            }
        };
        
        this.websocket.onerror = (error) => {
            console.error('WebSocket error:', error);
        };
    }
    
    attemptReconnection() {
        if (!this.reconnectionAttempts) {
            this.reconnectionAttempts = 0;
        }
        
        const maxAttempts = 5;
        const baseDelay = 1000; // 1 second
        
        if (this.reconnectionAttempts >= maxAttempts) {
            console.error('Max reconnection attempts reached');
            this.showError('M·∫•t k·∫øt n·ªëi. Vui l√≤ng t·∫£i l·∫°i trang.');
            return;
        }
        
        this.reconnectionAttempts++;
        const delay = baseDelay * Math.pow(2, this.reconnectionAttempts - 1); // Exponential backoff
        
        console.log(`Attempting WebSocket reconnection ${this.reconnectionAttempts}/${maxAttempts} in ${delay}ms`);
        
        setTimeout(() => {
            if (this.currentUser && this.currentUser.id) {
                this.connectWebSocket();
            }
        }, delay);
    }
    
    async handleWebSocketMessage(data) {
        try {
            const message = JSON.parse(data);
            console.log('üì® WebSocket message received:', message);
            
            switch (message.type) {
                case 'chat_message':
                    this.handleRealMessage(message.data);
                    break;
                case 'match_found':
                    await this.handleMatchFound(message.data);
                    break;
                case 'keep_status':
                    this.updateKeepStatus(message.data);
                    break;
                case 'typing_status':
                    this.showTypingIndicator(message.data.is_typing);
                    break;
                case 'conversation_ended':
                    this.handleConversationEnded(message.data);
                    break;
                case 'countdown_update':
                    this.handleCountdownUpdate(message.data);
                    break;
                default:
                    console.log('‚ö†Ô∏è Unknown message type:', message.type);
            }
        } catch (error) {
            console.error('‚ùå Error parsing WebSocket message:', error);
        }
    }
    
    handleCountdownUpdate(data) {
        console.log('üîÑ Countdown update received:', data);
        
        // C·∫≠p nh·∫≠t th√¥ng tin countdown t·ª´ server
        if (data.time_left !== undefined) {
            this.countdownTimeLeft = data.time_left;
        }
        if (data.start_time) {
            this.countdownStartTime = data.start_time;
        }
        if (data.both_kept !== undefined) {
            this.setBothKeptStatus(data.both_kept);
        }
        
        // C·∫≠p nh·∫≠t hi·ªÉn th·ªã
        this.updateCountdownDisplay();
        
        // N·∫øu countdown ƒë√£ h·∫øt th·ªùi gian v√† ch∆∞a keep, k·∫øt th√∫c
        if (data.expired && !this.bothKept) {
            console.log('‚ùå Countdown expired from server update');
            this.endCountdown();
        }
    }
    
    handleRealMessage(messageData) {
        // N·∫øu c√≥ tin nh·∫Øn t·∫°m th·ªùi ƒëang ch·ªù v√† n·ªôi dung gi·ªëng nhau, x√≥a tin nh·∫Øn t·∫°m th·ªùi
        if (this.pendingTempMessage && 
            this.pendingTempMessage.content === messageData.content &&
            messageData.sender_id === this.currentUser.id) {
            
            // X√≥a tin nh·∫Øn t·∫°m th·ªùi
            const tempElement = document.querySelector(`[data-temp-id="${this.pendingTempMessage.id}"]`);
            if (tempElement) {
                tempElement.remove();
            }
            
            // X√≥a reference
            this.pendingTempMessage = null;
        }
        
        // Th√™m tin nh·∫Øn th·∫≠t t·ª´ server
        this.addMessage(messageData);
    }
    
    async handleMatchFound(matchData) {
        console.log('üéØ Match found notification received:', matchData);
        
        // L∆∞u th√¥ng tin conversation
        this.currentConversation = matchData;
        
        // Hi·ªÉn th·ªã th√¥ng b√°o match th√†nh c√¥ng
        this.showSuccess(`ƒê√£ k·∫øt n·ªëi v·ªõi ${matchData.matched_user?.nickname || 'ng∆∞·ªùi l·∫°'}! üéâ`);
        
        // D·ª´ng interval c·∫≠p nh·∫≠t s·ªë ng∆∞·ªùi ƒëang t√¨m ki·∫øm n·∫øu c√≥
        if (this.searchingCountInterval) {
            clearInterval(this.searchingCountInterval);
            this.searchingCountInterval = null;
        }
        
        // Ki·ªÉm tra xem user c√≥ ƒëang ·ªü trang t√¨m ki·∫øm kh√¥ng
        const isCurrentlySearching = document.querySelector('.searching-container') !== null;
        console.log('üîç User currently searching:', isCurrentlySearching);
        
        // Chuy·ªÉn sang chat interface ngay l·∫≠p t·ª©c
        await this.showChatInterface();
        
        // K·∫øt n·ªëi WebSocket n·∫øu ch∆∞a k·∫øt n·ªëi
        if (!this.websocket || this.websocket.readyState !== WebSocket.OPEN) {
            this.connectWebSocket();
        }
        
        // C·∫≠p nh·∫≠t URL trong browser ƒë·ªÉ c√≥ th·ªÉ bookmark ho·∫∑c share
        if (matchData.chat_url) {
            window.history.pushState({ conversationId: matchData.conversation_id }, '', matchData.chat_url);
        }
        
        console.log('‚úÖ Successfully switched to chat interface for match');
    }
    
    setupChatEventListeners() {
        const sendBtn = document.getElementById('sendBtn');
        const messageInput = document.getElementById('messageInput');
        const keepBtn = document.getElementById('keepBtn');
        const endBtn = document.getElementById('endBtn');
        
        sendBtn.addEventListener('click', () => this.sendMessage());
        
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.sendMessage();
            }
        });
        
        messageInput.addEventListener('input', () => this.handleTyping());
        
        keepBtn.addEventListener('click', () => this.toggleKeep());
        endBtn.addEventListener('click', () => this.endConversation());
    }
    
    addMessage(message) {
        const chatMessages = document.getElementById('chatMessages');
        const isOwnMessage = message.sender_id === this.currentUser.id;
        
        const messageElement = document.createElement('div');
        messageElement.className = `message ${isOwnMessage ? 'sent' : 'received'}`;
        
        // Th√™m data-temp-id n·∫øu l√† tin nh·∫Øn t·∫°m th·ªùi
        if (message.id && message.id > 1000000000000) { // ID t·∫°m th·ªùi t·ª´ Date.now()
            messageElement.setAttribute('data-temp-id', message.id);
        }
        
        // X·ª≠ l√Ω th·ªùi gian - chuy·ªÉn ƒë·ªïi t·ª´ UTC sang m√∫i gi·ªù local
        let time;
        if (message.created_at) {
            const date = new Date(message.created_at);
            time = date.toLocaleTimeString('vi-VN', {
                hour: '2-digit',
                minute: '2-digit',
                timeZone: 'Asia/Ho_Chi_Minh' // ƒê·∫£m b·∫£o s·ª≠ d·ª•ng m√∫i gi·ªù Vi·ªát Nam
            });
        } else {
            time = new Date().toLocaleTimeString('vi-VN', {
                hour: '2-digit',
                minute: '2-digit',
                timeZone: 'Asia/Ho_Chi_Minh'
            });
        }
        
        messageElement.innerHTML = `
            <div class="message-bubble">
                <div>${message.content}</div>
                <div class="message-time">${time}</div>
            </div>
        `;
        
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    sendMessage() {
        const input = document.getElementById('messageInput');
        const content = input.value.trim();
        
        if (!content) return;
        
        // Hi·ªÉn th·ªã tin nh·∫Øn ngay l·∫≠p t·ª©c cho user g·ª≠i
        const tempMessage = {
            id: Date.now(), // ID t·∫°m th·ªùi
            conversation_id: this.currentConversation.conversation_id,
            sender_id: this.currentUser.id,
            content: content,
            message_type: 'text',
            created_at: new Date().toISOString()
        };
        
        this.addMessage(tempMessage);
        
        // Clear input ngay l·∫≠p t·ª©c ƒë·ªÉ UX t·ªët h∆°n
        input.value = '';
        
        // L∆∞u temp message ƒë·ªÉ c√≥ th·ªÉ x√≥a sau khi nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn th·∫≠t
        this.pendingTempMessage = tempMessage;
        
        // G·ª≠i tin nh·∫Øn qua WebSocket v·ªõi retry logic
        this.sendMessageWithRetry({
            type: 'chat_message',
            data: {
                conversation_id: this.currentConversation.conversation_id,
                content: content,
                message_type: 'text'
            }
        });
    }
    
    sendMessageWithRetry(message, retryCount = 0) {
        const maxRetries = 3;
        
        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
            try {
                this.websocket.send(JSON.stringify(message));
            } catch (error) {
                console.error('Error sending message:', error);
                if (retryCount < maxRetries) {
                    setTimeout(() => {
                        this.sendMessageWithRetry(message, retryCount + 1);
                    }, 1000 * (retryCount + 1)); // Exponential backoff
                }
            }
        } else {
            if (retryCount < maxRetries) {
                setTimeout(() => {
                    this.sendMessageWithRetry(message, retryCount + 1);
                }, 1000 * (retryCount + 1));
            } else {
                this.showError('Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i.');
            }
        }
    }
    
    handleTyping() {
        // Debounce typing events ƒë·ªÉ tr√°nh spam
        if (this.typingTimeout) {
            clearTimeout(this.typingTimeout);
        }
        
        // G·ª≠i typing status ngay l·∫≠p t·ª©c
        const message = {
            type: 'typing',
            data: {
                conversation_id: this.currentConversation.conversation_id,
                is_typing: true
            }
        };
        
        this.sendMessageWithRetry(message);
        
        // Auto-stop typing sau 1 gi√¢y
        this.typingTimeout = setTimeout(() => {
            const stopTypingMessage = {
                type: 'typing',
                data: {
                    conversation_id: this.currentConversation.conversation_id,
                    is_typing: false
                }
            };
            this.sendMessageWithRetry(stopTypingMessage);
        }, 1000);
    }
    
    showTypingIndicator(isTyping) {
        const indicator = document.getElementById('typingIndicator');
        if (indicator) {
            indicator.style.display = isTyping ? 'block' : 'none';
        }
    }
    
    async toggleKeep() {
        try {
            const response = await fetch('/keep', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('access_token')}`
                },
                body: JSON.stringify({
                    conversation_id: this.currentConversation.conversation_id,
                    keep_status: !this.keepStatus
                })
            });
            
            if (response.ok) {
                this.keepStatus = !this.keepStatus;
                this.updateKeepStatus({ keep_status: this.keepStatus, both_kept: false });
            }
        } catch (error) {
            this.showError('L·ªói khi c·∫≠p nh·∫≠t Keep');
        }
    }
    
    updateKeepStatus(data) {
        const keepBtn = document.getElementById('keepBtn');
        if (data.both_kept) {
            keepBtn.innerHTML = 'üíñ';
            this.setBothKeptStatus(true);
        } else if (data.keep_status) {
            keepBtn.innerHTML = 'üíó';
        } else {
            keepBtn.innerHTML = '‚ù§Ô∏è';
        }
    }
    
    async endConversation() {
        try {
            const response = await fetch('/end', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('access_token')}`
                },
                body: JSON.stringify({
                    conversation_id: this.currentConversation.conversation_id
                })
            });
            
            if (response.ok) {
                // Khi ng∆∞·ªùi d√πng ch·ªß ƒë·ªông k·∫øt th√∫c, c≈©ng g·ªçi handleConversationEnded
                // WebSocket s·∫Ω g·ª≠i th√¥ng b√°o cho ng∆∞·ªùi c√≤n l·∫°i
                this.handleConversationEnded({ redirect_url: '/' });
            }
        } catch (error) {
            this.showError('L·ªói khi k·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán');
        }
    }
    
    handleConversationEnded(data = {}) {
        // D·ª´ng countdown timer
        this.stopCountdown();
        
        if (this.websocket) {
            this.websocket.close();
        }
        
        // Hi·ªÉn th·ªã th√¥ng b√°o ph√π h·ª£p d·ª±a tr√™n l√Ω do k·∫øt th√∫c
        if (data.reason === 'countdown_expired') {
            this.showError('H·∫øt th·ªùi gian! Cu·ªôc tr√≤ chuy·ªán ƒë√£ k·∫øt th√∫c.');
        } else {
            this.showSuccess('Cu·ªôc tr√≤ chuy·ªán ƒë√£ k·∫øt th√∫c');
        }
        
        // Redirect v·ªÅ trang ch·ªß ho·∫∑c URL ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
        setTimeout(() => {
            const redirectUrl = data.redirect_url || '/';
            window.location.href = redirectUrl;
        }, 2000);
    }
    
    async handleLogout() {
        try {
            await fetch('/logout', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('access_token')}`
                }
            });
        } catch (error) {
            console.error('Logout error:', error);
        }
        
        // D·ª´ng countdown timer
        this.stopCountdown();
        
        localStorage.removeItem('access_token');
        this.currentUser = null;
        this.currentConversation = null;
        
        if (this.websocket) {
            this.websocket.close();
        }
        
        this.showLoginForm();
    }
    
    showError(message) {
        const toast = document.createElement('div');
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #ff6b6b;
            color: white;
            padding: 15px 20px;
            border-radius: 10px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
            z-index: 1000;
        `;
        toast.textContent = message;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.remove();
        }, 3000);
    }
    
    showSuccess(message) {
        const toast = document.createElement('div');
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #4CAF50;
            color: white;
            padding: 12px 20px;
            border-radius: 4px;
            z-index: 1000;
            animation: slideIn 0.3s ease;
        `;
        toast.textContent = message;
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.remove();
        }, 3000);
    }
    
    // Countdown timer methods
    startCountdown() {
        console.log('üöÄ Starting countdown with:', {
            countdownStartTime: this.countdownStartTime,
            countdownTimeLeft: this.countdownTimeLeft,
            bothKept: this.bothKept
        });
        
        // N·∫øu ƒë√£ c√≥ th√¥ng tin t·ª´ server, s·ª≠ d·ª•ng th·ªùi gian t·ª´ server
        if (this.countdownStartTime) {
            this.countdownTimeLeft = this.calculateTimeLeftFromServer();
            console.log('üìä Using server time, calculated time left:', this.countdownTimeLeft);
        } else {
            // N·∫øu ch∆∞a c√≥ start time, sync v·ªõi server tr∆∞·ªõc
            console.log('üìä No start time available, syncing with server first');
            this.syncCountdownWithServer().then(() => {
                // Sau khi sync, t√≠nh to√°n l·∫°i th·ªùi gian
                if (this.countdownStartTime) {
                    this.countdownTimeLeft = this.calculateTimeLeftFromServer();
                    console.log('üìä After sync, calculated time left:', this.countdownTimeLeft);
                } else {
                    this.countdownTimeLeft = this.countdownDuration;
                    console.log('üìä Using default duration after sync:', this.countdownTimeLeft);
                }
                this.updateCountdownDisplay();
            });
            return; // Tho√°t s·ªõm, s·∫Ω ti·∫øp t·ª•c sau khi sync
        }
        
        this.updateCountdownDisplay();
        
        // Clear interval c≈© n·∫øu c√≥
        if (this.countdownInterval) {
            clearInterval(this.countdownInterval);
        }
        if (this.serverSyncInterval) {
            clearInterval(this.serverSyncInterval);
        }
        
        this.countdownInterval = setInterval(() => {
            this.countdownTimeLeft--;
            this.updateCountdownDisplay();
            
            if (this.countdownTimeLeft <= 0) {
                this.endCountdown();
            }
        }, 1000);
        
        // Sync v·ªõi server m·ªói 15 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªìng b·ªô (gi·∫£m t·ª´ 30s xu·ªëng 15s)
        this.serverSyncInterval = setInterval(() => {
            this.syncCountdownWithServer();
        }, 15000);
        
        // Sync ngay l·∫≠p t·ª©c sau 2 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªìng b·ªô ban ƒë·∫ßu
        setTimeout(() => {
            this.syncCountdownWithServer();
        }, 2000);
    }
    
    calculateTimeLeftFromServer() {
        if (!this.countdownStartTime) {
            console.log('‚ö†Ô∏è No countdown start time available');
            return this.countdownDuration;
        }
        
        try {
            const startTime = new Date(this.countdownStartTime);
            const now = new Date();
            
            // ƒê·∫£m b·∫£o c·∫£ hai th·ªùi gian ƒë·ªÅu c√≥ timezone info
            if (startTime.toString() === 'Invalid Date') {
                console.error('‚ùå Invalid start time format:', this.countdownStartTime);
                return this.countdownDuration;
            }
            
            console.log('üïê Time calculation:', {
                startTime: startTime.toISOString(),
                now: now.toISOString(),
                startTimeLocal: startTime.toString(),
                nowLocal: now.toString()
            });
            
            // T√≠nh to√°n th·ªùi gian ƒë√£ tr√¥i qua (t√≠nh b·∫±ng milliseconds)
            const elapsed = Math.floor((now.getTime() - startTime.getTime()) / 1000);
            const timeLeft = this.countdownDuration - elapsed;
            
            console.log('‚è±Ô∏è Time calculation result:', {
                elapsed: elapsed,
                timeLeft: timeLeft,
                duration: this.countdownDuration
            });
            
            return Math.max(0, timeLeft);
        } catch (error) {
            console.error('‚ùå Error calculating time left from server:', error);
            return this.countdownDuration;
        }
    }
    
    async syncCountdownWithServer() {
        if (!this.currentConversation) return;
        
        try {
            const response = await fetch(`/api/conversation/${this.currentConversation.conversation_id}/countdown`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('access_token')}`
                }
            });
            
            if (response.ok) {
                const data = await response.json();
                const serverTimeLeft = data.data.time_left;
                const serverExpired = data.data.expired;
                const serverBothKept = data.data.both_kept;
                const serverStartTime = data.data.start_time;
                
                console.log('üîÑ Countdown sync with server:', {
                    serverTimeLeft: serverTimeLeft,
                    localTimeLeft: this.countdownTimeLeft,
                    serverExpired: serverExpired,
                    serverBothKept: serverBothKept,
                    serverStartTime: serverStartTime
                });
                
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i keep
                this.setBothKeptStatus(serverBothKept);
                
                // C·∫≠p nh·∫≠t start time n·∫øu ch∆∞a c√≥ ho·∫∑c kh√°c v·ªõi server
                if (serverStartTime) {
                    if (!this.countdownStartTime || this.countdownStartTime !== serverStartTime) {
                        this.countdownStartTime = serverStartTime;
                        console.log('üìä Updated countdown start time from server');
                    }
                }
                
                // N·∫øu countdown ƒë√£ h·∫øt th·ªùi gian v√† ch∆∞a keep, k·∫øt th√∫c ngay l·∫≠p t·ª©c
                if (serverExpired && !this.bothKept) {
                    console.log('‚ùå Countdown expired on server, ending conversation immediately');
                    this.endCountdown();
                    return;
                }
                
                // Sync th·ªùi gian n·∫øu ch√™nh l·ªách > 3 gi√¢y (gi·∫£m t·ª´ 5s xu·ªëng 3s)
                if (Math.abs(this.countdownTimeLeft - serverTimeLeft) > 3) {
                    console.log(`üîÑ Syncing countdown: local=${this.countdownTimeLeft}s, server=${serverTimeLeft}s`);
                    this.countdownTimeLeft = serverTimeLeft;
                    this.updateCountdownDisplay();
                }
                
                // N·∫øu th·ªùi gian c√≤n l·∫°i <= 0, k·∫øt th√∫c ngay
                if (this.countdownTimeLeft <= 0 && !this.bothKept) {
                    console.log('‚ùå Countdown time left <= 0, ending conversation');
                    this.endCountdown();
                    return;
                }
            } else if (response.status === 404) {
                // Conversation kh√¥ng t·ªìn t·∫°i, k·∫øt th√∫c
                console.log('‚ùå Conversation not found, ending');
                this.handleConversationEnded({ redirect_url: '/' });
            } else if (response.status === 401) {
                // Token h·∫øt h·∫°n
                console.log('‚ùå Token expired during countdown sync');
                this.showError('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n');
                setTimeout(() => {
                    this.handleLogout();
                }, 2000);
            }
        } catch (error) {
            console.error('‚ùå Error syncing countdown with server:', error);
            // Kh√¥ng l√†m g√¨ n·∫øu c√≥ l·ªói network, ti·∫øp t·ª•c v·ªõi countdown local
        }
    }
    
    stopCountdown() {
        if (this.countdownInterval) {
            clearInterval(this.countdownInterval);
            this.countdownInterval = null;
        }
        if (this.serverSyncInterval) {
            clearInterval(this.serverSyncInterval);
            this.serverSyncInterval = null;
        }
    }
    
    updateCountdownDisplay() {
        const headerElement = document.querySelector('.chat-header h3');
        if (!headerElement) return;
        
        if (this.bothKept) {
            // N·∫øu c·∫£ 2 ƒë√£ keep, hi·ªÉn th·ªã "ƒê√£ k·∫øt n·ªëi"
            headerElement.textContent = 'ƒê√£ k·∫øt n·ªëi';
            headerElement.style.color = '#4CAF50';
            headerElement.className = ''; // X√≥a t·∫•t c·∫£ class countdown
        } else {
            // Hi·ªÉn th·ªã countdown
            const minutes = Math.floor(this.countdownTimeLeft / 60);
            const seconds = this.countdownTimeLeft % 60;
            const timeString = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            
            headerElement.textContent = `‚è∞ ${timeString}`;
            headerElement.className = 'countdown'; // Th√™m class countdown
            
            // ƒê·ªïi m√†u v√† animation khi g·∫ßn h·∫øt th·ªùi gian
            if (this.countdownTimeLeft <= 30) {
                headerElement.style.color = '#ff6b6b'; // ƒê·ªè khi c√≤n 30s
                headerElement.classList.add('danger');
                headerElement.classList.remove('warning');
            } else if (this.countdownTimeLeft <= 60) {
                headerElement.style.color = '#ffa726'; // Cam khi c√≤n 1 ph√∫t
                headerElement.classList.add('warning');
                headerElement.classList.remove('danger');
            } else {
                headerElement.style.color = '#2196F3'; // Xanh d∆∞∆°ng
                headerElement.classList.remove('warning', 'danger');
            }
        }
    }
    
    endCountdown() {
        this.stopCountdown();
        this.showError('H·∫øt th·ªùi gian! Cu·ªôc tr√≤ chuy·ªán s·∫Ω k·∫øt th√∫c.');
        
        // K·∫øt th√∫c conversation ngay l·∫≠p t·ª©c khi countdown h·∫øt
        this.endConversation();
    }
    
    setBothKeptStatus(bothKept) {
        this.bothKept = bothKept;
        if (bothKept) {
            this.stopCountdown();
            this.updateCountdownDisplay();
        }
    }
    
    async updateSearchingCount() {
        try {
            const response = await fetch('/api/searching-count');
            if (response.ok) {
                const data = await response.json();
                const countElement = document.getElementById('searchingCount');
                if (countElement) {
                    countElement.textContent = data.data.searching_count;
                }
            }
        } catch (error) {
            console.error('L·ªói khi c·∫≠p nh·∫≠t s·ªë ng∆∞·ªùi ƒëang t√¨m ki·∫øm:', error);
            const countElement = document.getElementById('searchingCount');
            if (countElement) {
                countElement.textContent = '?';
            }
        }
    }
}

// Initialize app when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new MapmoApp();
}); 